import React, { useState, useEffect, useRef } from "react";
import io from "socket.io-client";
import axios from "axios";
import forge from "node-forge";
import { UserIcon, UsersIcon, PhoneIcon, BellIcon } from "@heroicons/react/24/outline";
import GroupManagement from "./GroupManagement";
import CallHandler from "./CallHandler";

// Utility function
const safeRender = (value, fallback = "Unknown") => {
  if (value === null || value === undefined) return fallback;
  if (typeof value === "string") return value;
  if (typeof value === "object" && value.name) return value.name;
  return JSON.stringify(value);
};

const Message = ({ token, privateKey }) => {
  const [selectedChat, setSelectedChat] = useState(null);
  const [chatType, setChatType] = useState(null);
  const [users, setUsers] = useState([]);
  const [groups, setGroups] = useState([]);
  const [messages, setMessages] = useState([]);
  const [message, setMessage] = useState("");
  const [currentUserId, setCurrentUserId] = useState(null);
  const [selectedFile, setSelectedFile] = useState(null);
  const [notifications, setNotifications] = useState([]);
  const socket = useRef(null);
  const fileInputRef = useRef(null);

  const decryptMessage = (encryptedContent, plaintextContent, isPrivate, senderId, currentUserId) => {
    if (!isPrivate || senderId === currentUserId) return safeRender(plaintextContent);
    if (!privateKey || !encryptedContent) return safeRender(encryptedContent || plaintextContent);
    try {
      const privateKeyObj = forge.pki.privateKeyFromPem(privateKey);
      const encryptedBytes = forge.util.decode64(encryptedContent);
      const decrypted = privateKeyObj.decrypt(encryptedBytes, "RSA-OAEP");
      return forge.util.decodeUtf8(decrypted);
    } catch (error) {
      console.error("Decryption error:", error.message);
      return "[Decryption Failed]";
    }
  };

  const canSendInGroup = (groupId) => {
    const group = groups.find((g) => g._id === groupId);
    if (!group) return false;
    const creatorId = safeRender(group.creator?._id || group.creator);
    if (creatorId === currentUserId) return true;
    const member = group.members.find((m) => safeRender(m.userId?._id || m.userId) === currentUserId);
    return member?.canSendMessages === true;
  };

  useEffect(() => {
    if (token && !socket.current) {
      socket.current = io("http://localhost:3000", { auth: { token }, forceNew: true });

      socket.current.on("connect", () => console.log("Connected:", socket.current.id));
      socket.current.on("userId", (userId) => {
        setCurrentUserId(userId);
        socket.current.userId = userId;
      });

      socket.current.on("chatMessage", (msg) => {
        const isPrivate = !!msg.recipient;
        const content = msg.file
          ? { type: "file", ...msg.file }
          : decryptMessage(
              msg.encryptedContent,
              msg.content,
              isPrivate,
              safeRender(msg.sender?._id || msg.sender),
              socket.current.userId
            );

        setMessages((prev) => {
          const filtered = prev.filter((m) => m.tempId !== msg.tempId && m._id !== msg._id);
          return [...filtered, { ...msg, content }];
        });

        if (safeRender(msg.sender?._id || msg.sender) !== currentUserId) {
          const senderName = safeRender(msg.sender?.name, "Someone");
          const notificationText = msg.file ? `${senderName} sent a file` : `${senderName}: ${content}`;
          const notificationId = Date.now();
          setNotifications((prev) => [...prev, { id: notificationId, text: notificationText }]);
          setTimeout(() => setNotifications((prev) => prev.filter((n) => n.id !== notificationId)), 5000);
        }
      });

      socket.current.on("error", (error) => console.error("Socket error:", error.message));

      axios
        .get("http://localhost:3000/api/users", { headers: { Authorization: token } })
        .then((res) => setUsers(res.data))
        .catch((err) => console.error("Error fetching users:", err));

      axios
        .get("http://localhost:3000/api/groups", { headers: { Authorization: token } })
        .then((res) => setGroups(res.data))
        .catch((err) => console.error("Error fetching groups:", err));
    }

    return () => {
      if (socket.current) {
        socket.current.disconnect();
        socket.current = null;
      }
    };
  }, [token, privateKey]);

  useEffect(() => {
    if (socket.current && chatType === "group" && selectedChat) {
      socket.current.emit("joinGroup", selectedChat);
      return () => socket.current.emit("leaveGroup", selectedChat);
    }
  }, [selectedChat, chatType]);

  useEffect(() => {
    if (token && selectedChat && currentUserId) {
      const fetchMessages = async () => {
        try {
          const url =
            chatType === "user"
              ? `http://localhost:3000/api/messages/private/${selectedChat}`
              : `http://localhost:3000/api/messages/group/${selectedChat}`;
          const res = await axios.get(url, { headers: { Authorization: token } });
          const processedMessages = res.data.map((msg) => ({
            ...msg,
            content: msg.file
              ? { type: "file", ...msg.file }
              : decryptMessage(
                  msg.encryptedContent,
                  msg.content,
                  !!msg.recipient,
                  safeRender(msg.sender?._id || msg.sender),
                  currentUserId
                ),
          }));
          setMessages(processedMessages);
        } catch (error) {
          console.error("Error fetching messages:", error);
        }
      };
      fetchMessages();
    }
  }, [selectedChat, chatType, token, privateKey, currentUserId]);

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      setSelectedFile(file);
      setMessage(`Uploading: ${file.name}`);
    }
  };

  const sendMessage = async () => {
    if (!socket.current || (!message.trim() && !selectedFile)) return;

    if (chatType === "group" && !canSendInGroup(selectedChat)) {
      setNotifications((prev) => [...prev, { id: Date.now(), text: "No permission to send" }]);
      return;
    }

    const tempId = Date.now().toString();
    let newMessage;

    if (selectedFile) {
      const formData = new FormData();
      formData.append("file", selectedFile);
      if (chatType === "user") formData.append("recipient", selectedChat);
      if (chatType === "group") formData.append("group", selectedChat);
      formData.append("tempId", tempId);

      try {
        const response = await axios.post("http://localhost:3000/api/upload", formData, {
          headers: { Authorization: token, "Content-Type": "multipart/form-data" },
        });
        newMessage = {
          sender: { _id: currentUserId, name: "You" },
          content: { type: "file", ...response.data },
          recipient: chatType === "user" ? selectedChat : null,
          group: chatType === "group" ? selectedChat : null,
          tempId,
          timestamp: new Date(),
        };
        socket.current.emit("chatMessage", {
          recipient: chatType === "user" ? selectedChat : null,
          group: chatType === "group" ? selectedChat : null,
          file: response.data,
          tempId,
        });
      } catch (error) {
        console.error("File upload failed:", error);
        return;
      }
    } else {
      newMessage = {
        sender: { _id: currentUserId, name: "You" },
        content: message,
        recipient: chatType === "user" ? selectedChat : null,
        group: chatType === "group" ? selectedChat : null,
        tempId,
        timestamp: new Date(),
      };
      socket.current.emit("chatMessage", {
        recipient: chatType === "user" ? selectedChat : null,
        group: chatType === "group" ? selectedChat : null,
        content: message,
        tempId,
      });
    }

    setMessages((prev) => [...prev, newMessage]);
    setMessage("");
    setSelectedFile(null);
    if (fileInputRef.current) fileInputRef.current.value = "";
  };

  const renderMessageContent = (msg) => {
    if (!msg || !msg.content) return <div>[Invalid Message]</div>;
    if (msg.content.type === "file") {
      const { name, url, size, mimeType } = msg.content;
      const isImage = mimeType?.startsWith("image/");
      return (
        <div className="flex flex-col">
          {isImage ? (
            <img src={url} alt={name} className="max-w-[200px] rounded-lg" />
          ) : (
            <a href={url} download={name} className="text-blue-500 hover:underline">
              ðŸ“Ž {name} ({(size / 1024).toFixed(2)} KB)
            </a>
          )}
        </div>
      );
    }
    return <p>{safeRender(msg.content)}</p>;
  };

  return (
    <div className="min-h-screen bg-gray-50 flex overflow-hidden relative">
      {/* Contact List */}
      <div className={`w-full md:w-1/4 bg-white border-r border-gray-200 transform transition-transform duration-300 ease-in-out`}>
        <div className="p-6 bg-gradient-to-r from-blue-400 to-blue-600 flex items-center">
          <h1 className="text-2xl font-bold text-white">Chats</h1>
        </div>
        <div className="flex items-center space-x-12 overflow-x-auto bg-white border-b border-gray-200 px-4 py-2">
          <button className="flex-shrink-0 flex flex-col items-center text-gray-700 font-semibold hover:text-blue-600">
            <UserIcon className="w-5 h-5" />
            <span className="text-xs">Profile</span>
          </button>
          <button className="flex-shrink-0 flex flex-col items-center text-gray-700 font-semibold hover:text-blue-600">
            <UsersIcon className="w-5 h-5" />
            <span className="text-xs">Groups</span>
          </button>
          <button className="flex-shrink-0 flex flex-col items-center text-gray-700 font-semibold hover:text-blue-600">
            <PhoneIcon className="w-5 h-5" />
            <span className="text-xs">Contacts</span>
          </button>
          <button className="flex-shrink-0 flex flex-col items-center text-gray-700 font-semibold hover:text-blue-600">
            <BellIcon className="w-5 h-5" />
            <span className="text-xs">Notifications</span>
          </button>
        </div>
        <GroupManagement 
          token={token}
          users={users}
          groups={groups}
          setGroups={setGroups}
          setSelectedChat={setSelectedChat}
          setChatType={setChatType}
          currentUserId={currentUserId}
        />
      </div>

      {/* Chat View */}
      <div className={`w-full md:w-3/4 bg-gray-50 absolute md:static inset-0 transform transition-transform duration-300 ease-in-out`}>
        <div className="p-6 bg-gradient-to-r from-blue-500 to-blue-600 flex items-center justify-between">
          <div className="flex items-center">
            <button className="md:hidden text-white mr-4" onClick={() => { setSelectedChat(null); setChatType(null); }}>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            <div>
              <h1 className="text-2xl font-bold text-white">
                {selectedChat ? (chatType === "user" ? safeRender(users.find((u) => u._id === selectedChat)?.name) : safeRender(groups.find((g) => g._id === selectedChat)?.name)) : "Select a Chat"}
              </h1>
            </div>
          </div>
        </div>

        <div className="p-6 overflow-y-auto h-[calc(100vh-192px)]">
          {selectedChat ? (
            <>
              <div className="flex justify-center mb-4">
                <div className="bg-gray-200 px-4 py-2 rounded-lg">
                  <p className="text-sm text-gray-600">
                    {chatType === "user" ? `${safeRender(users.find((u) => u._id === selectedChat)?.name)} joined the chat` : `Group "${safeRender(groups.find((g) => g._id === selectedChat)?.name)}" created`}
                  </p>
                </div>
              </div>
              {messages.filter((msg) => chatType === "user" ? 
                ((msg.recipient === selectedChat && msg.sender._id === currentUserId) || (msg.recipient === currentUserId && msg.sender._id === selectedChat)) : 
                msg.group === selectedChat).map((msg, index) => {
                const senderName = safeRender(users.find((u) => u._id === safeRender(msg.sender?._id || msg.sender))?.name, "Unknown");
                const receiverName = chatType === "user" ? safeRender(users.find((u) => u._id === (msg.recipient === currentUserId ? selectedChat : msg.recipient))?.name, "Unknown") : safeRender(groups.find((g) => g._id === selectedChat)?.name, "Group");

                return (
                  <div key={msg._id || msg.tempId || `msg-${index}`} className={`flex mb-4 ${msg.sender._id === currentUserId ? "justify-end" : "justify-start"}`}>
                    <div className={`flex flex-col ${msg.sender._id === currentUserId ? "items-end" : "items-start"} max-w-[60%]`}>
                      <div className={`text-xs mb-1 ${msg.sender._id === currentUserId ? "text-gray-600" : "text-gray-500"}`}>
                        {chatType === "user" ? (<><span>{senderName}</span> â†’ <span>{receiverName}</span></>) : (<span>{senderName}</span>)}
                      </div>
                      <div className={`p-3 rounded-lg shadow ${msg.sender._id === currentUserId ? "bg-gradient-to-r from-blue-500 to-blue-600 text-white" : "bg-white text-gray-800"}`}>
                        {renderMessageContent(msg)}
                        <p className={`text-xs mt-1 ${msg.sender._id === currentUserId ? "text-white opacity-80" : "text-gray-500"}`}>
                          {new Date(msg.timestamp).toLocaleTimeString()}
                        </p>
                      </div>
                    </div>
                  </div>
                );
              })}
            </>
          ) : (
            <div className="flex items-center justify-center h-full text-gray-500">
              Select a chat to start messaging
            </div>
          )}
        </div>
        {selectedChat && (
          <div className="p-4 bg-white border-t border-gray-200">
            <div className="flex items-center">
              <input type="file" ref={fileInputRef} onChange={handleFileChange} className="text-gray-500 mr-2" />
              <input
                type="text"
                placeholder="Type a message or select a file..."
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                onKeyPress={(e) => e.key === "Enter" && sendMessage()}
                className="flex-1 p-2 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500"
                disabled={selectedFile !== null}
              />
              <button onClick={sendMessage} className="ml-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white p-2 rounded-lg hover:from-blue-600 hover:to-blue-700">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                </svg>
              </button>
            </div>
          </div>
        )}
      </div>

      <CallHandler 
        socket={socket}
        token={token}
        users={users}
        selectedChat={selectedChat}
        setSelectedChat={setSelectedChat}
        chatType={chatType}
        setChatType={setChatType}
        setNotifications={setNotifications}
      />

      {notifications.map((notification) => (
        <div key={notification.id} className="fixed top-4 right-4 bg-white p-4 rounded-lg shadow-lg z-50">
          <p>{notification.text}</p>
        </div>
      ))}
    </div>
  );
};

export default Message;